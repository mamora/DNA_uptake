v
a <- "hello Mateo"
a
a
s<- "hello tio Simon"
s
c<- "hello tia Cris"
c
a
s
v
a
s
c
v
r
m
a
c
s
s
r
m
v
ca
v
s
a
c
a
n
a
s
m
v
a
r
c
m
v
r
a
source("C:/Users/marcelo/Dropbox/uptake/Final_resources/R_scripts/peak finder/pssmFunctions1.R")
np.new.scores<- read.csv(file="C:/Users/marcelo/Dropbox/uptake/Everything_else/Marcelo scripts and files/git_final_files/datasets/np.new.scores.csv")
str(np.new.scores)
p <- ggplot() +
geom_histogram(aes(x = max), binwidth = 0.5, colour = "black", data = np.new.scores) +
labs(x = "Motif Anomalous positions score") +
ggtitle(" Distribution of scores of motif made based on Anomalous position sequence ") +
theme() +
theme_bw() +
theme(panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
plot.title = element_text(size = rel(1.2), face = "bold", vjust = 1.5))
p
np.uptake.scores<- read.csv("C:/Users/marcelo/Dropbox/uptake/Final_resources/R_scripts/Scoring_USS/Output/np.uptake.scores.csv") #save file
str(np.uptake.scores)
uptake<- read.csv("C:/Users/marcelo/Dropbox/uptake/Final_resources/R_scripts/Scoring_USS/Output/uptake_recal.csv") #save file
str(uptake)
str(uptake)
uptake$new_score<- np.new.scores$max
str(uptake)
p <- ggplot() +
geom_histogram(aes(x = max), binwidth = 0.5, colour = "black", data = np.new.scores) +
labs(x = "Motif Anomalous positions score") +
ggtitle(" Distribution of scores of motif made based on Anomalous position sequence ") +
theme() +
theme_bw() +
theme(panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
plot.title = element_text(size = rel(1.2), face = "bold", vjust = 1.5))
p
source("C:/Users/marcelo/Dropbox/uptake/Final_resources/R_scripts/peak finder/pssmFunctions1.R")
new_np.9<- which(uptake$new_score >= 10)
str(uptake)
which(new_np.9 <= 10000)
p <- ggplot(data = uptake[1:10000,]) +
geom_point(aes(x = pos, y = ratio),shape = 20, size = 1, colour = "blue") +
geom_point(aes(x = pos, y = ratio),shape = 20, size = 2, colour = "red", data = new_np.9[1:21,]) +
scale_y_continuous(limits = c(0, 6), expand = c(0, 0))+
labs(x = "pos", y = "uptake ratio") +
theme_bw() +
theme(panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
plot.title = element_text(size = rel(1.2), face = "bold", vjust = 1.5))
p
new_np.9[1:21,]
new_np.9[1:21,]
new_np.9[1:21]
new_motif.9<- uptake[new_np.9,]
str(new_motif.9)
p <- ggplot(data = uptake[1:10000,]) +
geom_point(aes(x = pos, y = ratio),shape = 20, size = 1, colour = "blue") +
geom_point(aes(x = pos, y = ratio),shape = 20, size = 2, colour = "red", data = new_motif.9[1:21]) +
scale_y_continuous(limits = c(0, 6), expand = c(0, 0))+
labs(x = "pos", y = "uptake ratio") +
theme_bw() +
theme(panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
plot.title = element_text(size = rel(1.2), face = "bold", vjust = 1.5))
p
p <- ggplot(data = uptake[1:10000,]) +
geom_point(aes(x = pos, y = ratio),shape = 20, size = 1, colour = "blue") +
geom_point(aes(x = pos, y = ratio),shape = 20, size = 2, colour = "red", data = new_motif.9[1:21,]) +
scale_y_continuous(limits = c(0, 6), expand = c(0, 0))+
labs(x = "pos", y = "uptake ratio") +
theme_bw() +
theme(panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
plot.title = element_text(size = rel(1.2), face = "bold", vjust = 1.5))
p
which(new_np.9 <= 50000)
p <- ggplot(data = uptake[1:50000,]) +
geom_point(aes(x = pos, y = ratio),shape = 20, size = 1, colour = "blue") +
geom_point(aes(x = pos, y = ratio),shape = 20, size = 2, colour = "red", data = new_motif.9[1:137,]) +
scale_y_continuous(limits = c(0, 6), expand = c(0, 0))+
labs(x = "pos", y = "uptake ratio") +
theme_bw() +
theme(panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
plot.title = element_text(size = rel(1.2), face = "bold", vjust = 1.5))
p
new_np.10<- which(uptake$new_score >= 11)
new_motif.10<- uptake[new_np.10,]
str(new_motif.10)
which(new_np.10 <= 50000)
p <- ggplot(data = uptake[1:50000,]) +
geom_point(aes(x = pos, y = ratio),shape = 20, size = 1, colour = "blue") +
geom_point(aes(x = pos, y = ratio),shape = 20, size = 2, colour = "red", data = new_motif.9[1:21,]) +
scale_y_continuous(limits = c(0, 6), expand = c(0, 0))+
labs(x = "pos", y = "uptake ratio") +
theme_bw() +
theme(panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
plot.title = element_text(size = rel(1.2), face = "bold", vjust = 1.5))
p
which(new_np.10 <= 50000)
new_motif.10<- uptake[new_np.10,]
str(new_motif.10)
new_motif.10<- uptake[new_np.10,]
p <- ggplot(data = uptake[1:50000,]) +
geom_point(aes(x = pos, y = ratio),shape = 20, size = 1, colour = "blue") +
geom_point(aes(x = pos, y = ratio),shape = 20, size = 2, colour = "red", data = new_motif.9[1:21,]) +
scale_y_continuous(limits = c(0, 6), expand = c(0, 0))+
labs(x = "pos", y = "uptake ratio") +
theme_bw() +
theme(panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
plot.title = element_text(size = rel(1.2), face = "bold", vjust = 1.5))
p
str(new_motif.10)
p <- ggplot(data = uptake[1:50000,]) +
geom_point(aes(x = pos, y = ratio),shape = 20, size = 1, colour = "blue") +
geom_point(aes(x = pos, y = ratio),shape = 20, size = 2, colour = "red", data = new_motif.10[1:21,]) +
scale_y_continuous(limits = c(0, 6), expand = c(0, 0))+
labs(x = "pos", y = "uptake ratio") +
theme_bw() +
theme(panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
plot.title = element_text(size = rel(1.2), face = "bold", vjust = 1.5))
p
7+50+25
3e-7+3e-8
82/3.3e-7
38+16
1e-5+2e-6
54/1.2e-5
4.5e+6/2.5e+8
17+5
22/3e-8
12+4
16/3e-8
(1e+7)*exp-((0.693*18)/14.26)
exp-((0.693*18)/14.26)
exp((0.693*18)/14.26)
((0.693*18)/14.26)
exp(-0.8748)
exp(0.8748)
exp(-0.8748)
1e+7*0.4169454
4.16e+6/2
(1239)/(2.5e+8*0.25*2.08e+6*1e-18*1e+6)
(1239)/(5.3e+8*0.25*2.08e+6*1e-18*1e+6)
(1180)/(5.3e+8*0.25*2.08e+6*1e-18*1e+6)
(1313)/(7.3e+8*0.25*2.08e+6*1e-18*1e+6)
d3<- argmax(x,y,w,span)  #run the original function
# Name the path of the working directory;
### YOUR PATH IS DIFFERENT THAN THIS ###
whereami <- "C:/Users/marcelo/Dropbox/uptake/task_list_marcelo/" # Where these files are located
# Set directory
setwd(whereami)
list.files(whereami) #see files in directory
uptake<- read.csv("datasets/uptake_recal.csv") #read file with positions and ratios (created in Ve4_Josh_task.R)
argmax <- function(x, y, w=1, ...) {
require(zoo)
n <- length(y)
y.smooth <- loess(y ~ x, ...)$fitted
y.max <- rollapply(zoo(y.smooth), 2*w+1, max, align="center")
delta <- y.max - y.smooth[-c(1:w, n+1-1:w)]
i.max <- which(delta <= 0) + w
list(x=x[i.max], i=i.max, y.hat=y.smooth)
}
#peak finder script with plotting function
original.test <- function(w, span) {
peaks <- argmax(x, y, w=w, span=span)
plot(x, y, cex=0.75, col="Gray", main=paste("w = ", w, ", span = ", span, sep=""))
lines(x, peaks$y.hat,  lwd=2) #$
y.min <- min(y)
sapply(peaks$i, function(i) lines(c(x[i],x[i]), c(y.min, peaks$y.hat[i]),
col="Red", lty=2))
points(x[peaks$i], peaks$y.hat[peaks$i], col="Red", pch=19, cex=1.25)
}
#select data to find peaks
x = uptake$pos[1:10000]
y = uptake$re.ratio[1:10000]
#careful DO NOT MESS WITH THE PARAMETERS
w = 200 #parameter  w = 200
span = 0.02 #parameter span = 0.02
d<- argmax(x,y,w,span)  #run the original function
str(d)
d
original.test(200,0.02) #run the original function with plotting
d<- argmax(x,y,w,span)  #run the original function
str(d)
original.test <- function(w, span) {
peaks <- argmax(x, y, w=w, span=span)
plot(x, y, cex=0.75, col="Gray", main=paste("w = ", w, ", span = ", span, sep=""))
lines(x, peaks$y.hat,  lwd=2) #$
y.min <- min(y)
sapply(peaks$i, function(i) lines(c(x[i],x[i]), c(y.min, peaks$y.hat[i]),
col="Red", lty=2))
points(x[peaks$i], peaks$y.hat[peaks$i], col="Red", pch=19, cex=1.25)
}
original.test(200,0.02) #run the original function with plotting
peaks <- argmax(x, y, w=w, span=span)
str(peaks)
d<- argmax(x,y,w=w,span=span)  #run the original function
str(d)
original.test(200,0.02) #run the original function with plotting
peak1<- test(x,y,w=w, span=span)
test <- function(x , y, w, span, cut) {
peaks <- argmax(x, y, w=w, span=span)
tem <- peaks[[1]] # add numbers of position to a vector instead of a list
peaks[[4]]<- uptake$ratio[tem]  #get uptake ratio of positions with peaks
trim<- which(peaks[[4]] >= cut) #eliminate positions with less than 0.5
pos<- peaks$x[trim]
ratio<- uptake$ratio[pos]
peak.data<- data.frame( pos = pos, ratio = ratio)
}
peak1<- test(x,y,w=w, span=span)
peak1<- test(x,y,w=w, span=span, cut = 0.2)
str(peak)
str(peak1)
p <- ggplot(aes(x = pos,y = ratio), data = uptake[1:10000,]) +
geom_point(shape = 20, size = 1, aes(colour = flag))+
scale_color_manual(values = c("TRUE" = "blue", "FALSE" = "red" )) +
scale_y_continuous(limits = c(0, 8))+
geom_point(aes(pos,ratio), colour = "black", shape = 19, data = peak1) +
labs(x = "genome positions", y = "uptake ratio") +
ggtitle(" uptake genomic map of mean uptake ratios from 0.25kb donor") +
theme_bw() +
theme(panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
plot.title = element_text(size = rel(1.2), face = "bold", vjust = 1.5))
library(ggplot2)
p <- ggplot(aes(x = pos,y = ratio), data = uptake[1:10000,]) +
geom_point(shape = 20, size = 1, aes(colour = flag))+
scale_color_manual(values = c("TRUE" = "blue", "FALSE" = "red" )) +
scale_y_continuous(limits = c(0, 8))+
geom_point(aes(pos,ratio), colour = "black", shape = 19, data = peak1) +
labs(x = "genome positions", y = "uptake ratio") +
ggtitle(" uptake genomic map of mean uptake ratios from 0.25kb donor") +
theme_bw() +
theme(panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
plot.title = element_text(size = rel(1.2), face = "bold", vjust = 1.5))
p
p <- ggplot(aes(x = pos,y = ratio), data = uptake[1:10000,]) +
geom_point(shape = 20, size = 1, aes(colour = flag))+
scale_color_manual(values = c("TRUE" = "blue", "FALSE" = "red" ), name = "Input coverage",labels = c("TRUE" = "positions with more then 10 reads input", "FALSE" = "positions with less then 10 reads input")) +
scale_y_continuous(limits = c(0, 8))+
geom_point(aes(pos,ratio), colour = "black", shape = 19, size = 2, data = peak1) +
labs(x = "genome positions", y = "uptake ratio") +
ggtitle(" uptake genomic map of mean uptake ratios from 0.25kb donor") +
theme(panel.grid.minor = element_line(colour="white", size=0.5),
plot.title = element_text(size = 16, face = "bold", hjust = 0.5),
axis.text  = element_text(size=16),
axis.title = element_text(size = 16, face = "bold"))
p
p <- ggplot(aes(x = pos,y = ratio), data = uptake[1:10000,]) +
geom_point(shape = 20, size = 1, aes(colour = flag))+
scale_color_manual(values = c("TRUE" = "blue", "FALSE" = "red" ), name = "Input coverage",labels = c("TRUE" = "positions with more then 10 reads input", "FALSE" = "positions with less then 10 reads input")) +
scale_y_continuous(limits = c(0, 8))+
geom_point(aes(pos,ratio), colour = "black", shape = 19, size = 2, data = peak1) +
labs(x = "genome positions", y = "uptake ratio") +
ggtitle(" uptake genomic map of mean uptake ratios from 0.25kb donor") +
theme(panel.grid.minor = element_line(colour="white", size=0.5),
plot.title = element_text(size = 16, face = "bold", hjust = 0.5),
axis.text  = element_text(size=16),
axis.title = element_text(size = 16, face = "bold"))
p
p <- ggplot(aes(x = pos,y = ratio), data = uptake[1:10000,]) +
geom_point(shape = 20, size = 1, aes(colour = flag))+
scale_color_manual(values = c("TRUE" = "blue", "FALSE" = "red" ), name = "Input coverage",labels = c("TRUE" = "positions with more then 10 reads input", "FALSE" = "positions with less then 10 reads input")) +
scale_y_continuous(limits = c(0, 8))+
geom_point(aes(pos,ratio), colour = "black", shape = 19, size = 2, data = peak1) +
labs(x = "genome positions", y = "uptake ratio") +
ggtitle(" uptake genomic map of mean uptake ratios from 0.25kb donor") +
theme(legend.position = "bottom",
panel.grid.minor = element_line(colour="white", size=0.5),
plot.title = element_text(size = 16, face = "bold", hjust = 0.5),
axis.text  = element_text(size=16),
axis.title = element_text(size = 16, face = "bold"))
p
x = uptake$pos[1:100000]
y = uptake$re.ratio[1:100000]
#careful DO NOT MESS WITH THE PARAMETERS
w = 200 #parameter  w = 200
span = 0.02 #parameter span = 0.02
peak1<- test(x,y,w=w, span=span, cut = 0.2)
peak2<- test(x,y,w=w, span=span, cut = 0.2)
peak2<- test(x,y,w=w, span=span, cut = 0.2)
str(peak2)
p <- ggplot(aes(x = pos,y = ratio), data = uptake[1:10000,]) +
geom_point(shape = 20, size = 1, aes(colour = flag))+
scale_color_manual(values = c("TRUE" = "blue", "FALSE" = "red" ), name = "Input coverage",labels = c("TRUE" = "positions with more then 10 reads input", "FALSE" = "positions with less then 10 reads input")) +
scale_y_continuous(limits = c(0, 8))+
geom_point(aes(pos,ratio), colour = "black", shape = 19, size = 2, data = peak2) +
labs(x = "genome positions", y = "uptake ratio") +
ggtitle(" uptake genomic map of mean uptake ratios from 0.25kb donor") +
theme(legend.position = "bottom",
panel.grid.minor = element_line(colour="white", size=0.5),
plot.title = element_text(size = 16, face = "bold", hjust = 0.5),
axis.text  = element_text(size=16),
axis.title = element_text(size = 16, face = "bold"))
p
str(peak2)
p <- ggplot(aes(x = pos,y = ratio), data = uptake[1:10000,]) +
geom_point(shape = 20, size = 1, aes(colour = flag))+
scale_color_manual(values = c("TRUE" = "blue", "FALSE" = "red" ), name = "Input coverage",labels = c("TRUE" = "positions with more then 10 reads input", "FALSE" = "positions with less then 10 reads input")) +
scale_y_continuous(limits = c(0, 8))+
geom_point(aes(pos,ratio), colour = "black", shape = 19, size = 2, data = peak2[1:5,]) +
labs(x = "genome positions", y = "uptake ratio") +
ggtitle(" uptake genomic map of mean uptake ratios from 0.25kb donor") +
theme(legend.position = "bottom",
panel.grid.minor = element_line(colour="white", size=0.5),
plot.title = element_text(size = 16, face = "bold", hjust = 0.5),
axis.text  = element_text(size=16),
axis.title = element_text(size = 16, face = "bold"))
p
x = uptake$pos[1:1000000]
y = uptak
x = uptake$pos[1:1000000]
y = uptake$re.ratio[1:1000000]
peak3<- test(x,y,w=w, span=span, cut = 0.2)
str(peak3)
whereami <- "C:/Users/marcelo/Dropbox/uptake/task_list_marcelo/datasets/" # Where these files are located
setwd(whereami)
sites    <- "Hin2206sites.txt" # From Rosie's Gibbs sampling of rd.fa
list.files(whereami) #see files in directory
library(seqLogo)
library(RColorBrewer)
source("../functions/pssmFunctions1.R")
source("../functions/seqLogoFunction_y_axis.R")
whereami <- "~/DNA_uptake" # Where these files are located
setwd(whereami)
sites    <- "datasets/Hin2206sites.txt" # From Rosie's Gibbs sampling of rd.fa
list.files(whereami) #see files in directory
source("helper_functions/pssmFunctions1.R")
source("helper_functions/seqLogoFunction_y_axis.R")
sitemat <- sites2matrix(sites)    # set of sites
pcm     <- matrix2pcm(sitemat)    # count matrix
pfm     <- pcm2pfm(pcm, pseudo=0) # frequency matrix
pfm<- pfm[,4:34]
p<- makePWM(pfm)
#### Contains a bunch of functions (probably hacky)
# Main one is SeqLogo2, which is my hack to get the right object
load("helper_functions/seqLogoFunction2.R")
inpPCM <- read.csv("Figure_1_logos/inppcm.csv", row.names=1)
perPCM <- read.csv("Figure_1_logos/perpcm.csv", row.names=1)
load("helper_functions/seqLogoFunction2.R")
load("helper_functions/seqLogoFunction2.R")
whereami <- "~/DNA_uptake" # Where these files are located
setwd(whereami)
sites    <- "datasets/Hin2206sites.txt" # From Rosie's Gibbs sampling of rd.fa
list.files(whereami) #see files in directory
library(seqLogo)
library(RColorBrewer)
source("helper_functions/pssmFunctions1.R")
source("helper_functions/seqLogoFunction_y_axis.R")
sitemat <- sites2matrix(sites)    # set of sites
pcm     <- matrix2pcm(sitemat)    # count matrix
pfm     <- pcm2pfm(pcm, pseudo=0) # frequency matrix
pfm<- pfm[,4:34]
p<- makePWM(pfm)
load("helper_functions/seqLogoFunction2.R")
inpPCM <- read.csv("Figure_1_logos/inppcm.csv", row.names=1)
perPCM <- read.csv("Figure_1_logos/perpcm.csv", row.names=1)
consensus <- "ATGCCAAAGTGCGGTTAATTTTTACAGTATTTTTGGGTTCGA"
consensus <- substring(consensus, 6, 36)
connum    <- as.numeric(factor(unlist(strsplit(consensus, ""))))
degen     <- 0.24 # This is the predicted dengeneracy of the input per position
sampn     <- 1e7  # This is the subsample size to make both datasets the same size.
expPCM           <- matrix(degen/3, length(connum), 4)
rownames(expPCM) <- rownames(inpPCM)
colnames(expPCM) <- colnames(inpPCM)
for(i in 1:31){
expPCM[i, connum[i]] <- 0.76
}
expPCM <- sampn * expPCM
z <- inpPCM/expPCM / rowSums(inpPCM/expPCM)
seqLogo2(t(z))
load("helper_functions/seqLogoFunction_uptake.R")
load("helper_functions/seqLogoFunction_uptake.R")
load("helper_functions/seqLogoFunction_uptake.R")
load("helper_functions/seqLogoFunction2.R")
load("helper_functions/seqLogoFunction2.R")
source("helper_functions/seqLogoFunction2.R")
inpPCM <- read.csv("Figure_1_logos/inppcm.csv", row.names=1)
perPCM <- read.csv("Figure_1_logos/perpcm.csv", row.names=1)
consensus <- "ATGCCAAAGTGCGGTTAATTTTTACAGTATTTTTGGGTTCGA"
consensus <- substring(consensus, 6, 36)
connum    <- as.numeric(factor(unlist(strsplit(consensus, ""))))
degen     <- 0.24 # This is the predicted dengeneracy of the input per position
sampn     <- 1e7  # This is the subsample size to make both datasets the same size.
expPCM           <- matrix(degen/3, length(connum), 4)
rownames(expPCM) <- rownames(inpPCM)
colnames(expPCM) <- colnames(inpPCM)
for(i in 1:31){
expPCM[i, connum[i]] <- 0.76
}
expPCM <- sampn * expPCM
z <- inpPCM/expPCM / rowSums(inpPCM/expPCM)
seqLogo2(t(z))
sum(pwm2ic2(t(z))) # bits inp vs exp
y <- perPCM/inpPCM / rowSums(perPCM/inpPCM)
seqLogo2(t(y))
sum(pwm2ic2(t(y))) # bits per vs inp
x <- perPCM/expPCM / rowSums(perPCM/expPCM)
png(filename="C:/Users/marcelo/Documents/DNA_uptake/Figure_1_logos/genomic_motifs.png", width = 900, height = 500, units = "px")
png(filename="C:/Users/marcelo/Documents/DNA_uptake/Figure_1_logos/genomic_motifs.png", width = 900, height = 500, units = "px")
seqLogo(p)
dev.off()
png(filename="C:/Users/marcelo/Documents/DNA_uptake/Figure_1_logos/uptake_motif.png", width = 900, height = 500, units = "px")
seqLogo2(t(x))
dev.off()
seqLogo3(p)
p<- makePWM(pfm)
seqLogo3(p)
source("helper_functions/seqLogoFunction_y_axis.R")
seqLogo3(p)
png(filename="C:/Users/marcelo/Documents/DNA_uptake/Figure_1_logos/genomic_motifs.png", width = 900, height = 500, units = "px")
seqLogo3(p)
dev.off()
source("helper_functions/seqLogoFunction_y_axis.R")
png(filename="Figure_1_logos/genomic_motifs.png", width = 900, height = 500, units = "px")
seqLogo3(p)
dev.off()
source("helper_functions/seqLogoFunction_y_axis.R")
png(filename="Figure_1_logos/genomic_motifs.png", width = 900, height = 500, units = "px")
seqLogo3(p)
dev.off()
source("helper_functions/seqLogoFunction_y_axis.R")
seqLogo2(t(x))
png(filename="Figure_1_logos/uptake_motif.png", width = 900, height = 500, units = "px")
seqLogo2(t(x))
dev.off()
png(filename="Figure_1_logos/genomic_motifs.png", width = 900, height = 500, units = "px")
seqLogo3(p)
dev.off()
pdf(filename="Figure_1_logos/genomic_motifs.png", width = 900, height = 500, units = "px")
seqLogo3(p)
dev.off()
pdf(filename="Figure_1_logos/uptake_motif.png", width = 900, height = 500, units = "px")
seqLogo2(t(x))
dev.off()
pdf(filename="Figure_1_logos/genomic_motifs.pdf", width = 900, height = 500, units = "px")
seqLogo3(p)
dev.off()
pdf(filename="Figure_1_logos/uptake_motif.pdf", width = 900, height = 500, units = "px")
seqLogo2(t(x))
dev.off()
pdf(file="Figure_1_logos/genomic_motifs.pdf", width = 900, height = 500, units = "px")
seqLogo3(p)
dev.off()
pdf(file="Figure_1_logos/uptake_motif.pdf", width = 900, height = 500, units = "px")
seqLogo2(t(x))
dev.
pdf(file="Figure_1_logos/genomic_motifs.pdf" units = "px")
seqLogo3(p)
dev.off()
pdf(file="Figure_1_logos/uptake_motif.pdf" units = "px")
seqLogo2(t(x))
dev.off()
pdf(file="Figure_1_logos/genomic_motifs.pdf" )
seqLogo3(p)
dev.off()
pdf(file="Figure_1_logos/uptake_motif.pdf" )
seqLogo2(t(x))
dev.off()
pdf(file="Figure_1_logos/genomic_motifs.pdf", width = 12, height = 7)
seqLogo3(p)
dev.off()
pdf(file="Figure_1_logos/uptake_motif.pdf", width = 12, height = 7)
seqLogo2(t(x))
dev.off()
7/0
700/700
700/55
settings<- read.csv("./Marcelo_paper_figures_new_order/model/Sept_10_2018/Settings.csv")
# load functions to build a motif
source(here::here("helper_functions","seqLogoFunction_y_axis.R"))
